package bot

import (
	"fmt"
	"log"
	"sort"
	"strings"
	"sync"
	"time"

	"gopkg.in/telebot.v3"

	"github.com/yourname/telegram-schedule-bot/internal/scheduler"
	"github.com/yourname/telegram-schedule-bot/internal/store"
	"github.com/yourname/telegram-schedule-bot/internal/timeutil"
)

const chooseDaysTitle = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ')"

type BotApp struct {
	Bot *telebot.Bot
	St  *store.Store
	Sch *scheduler.Scheduler

	addMu    sync.Mutex
	addState map[int64]*AddState

	// repeat menu
	repMK       *telebot.ReplyMarkup
	btnRepToday telebot.Btn
	btnRepDaily telebot.Btn
	btnRepWork  telebot.Btn
	btnRepCust  telebot.Btn

	// custom days (use static uniques; keyboard re-rendered with labels)
	btnMon      telebot.Btn
	btnTue      telebot.Btn
	btnWed      telebot.Btn
	btnThu      telebot.Btn
	btnFri      telebot.Btn
	btnSat      telebot.Btn
	btnSun      telebot.Btn
	btnDaysDone telebot.Btn

	// report menu
	reportMK    *telebot.ReplyMarkup
	btnRptDay   telebot.Btn
	btnRptWeek  telebot.Btn
	btnRptMonth telebot.Btn
	btnRptAll   telebot.Btn

	// per-task list buttons
	btnTaskToggle telebot.Btn
	btnTaskDelete telebot.Btn
}

type AddState struct {
	Step     int
	Title    string
	StartH   int
	StartM   int
	EndH     int
	EndM     int
	Repeat   string
	DaysMask int
}

func New(b *telebot.Bot, st *store.Store, sch *scheduler.Scheduler) *BotApp {
	return &BotApp{Bot: b, St: st, Sch: sch, addState: make(map[int64]*AddState)}
}

func (a *BotApp) SetupHandlers(defaultTZ string) {
	// main reply keyboard
	rp := &telebot.ReplyMarkup{}
	btnAdd := rp.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
	btnList := rp.Text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
	btnRun := rp.Text("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å")
	btnStop := rp.Text("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
	btnTZ := rp.Text("üïí –¢–∞–π–º-–∑–æ–Ω–∞")
	btnReport := rp.Text("üìä –û—Ç—á—ë—Ç")
	rp.Reply(rp.Row(btnAdd, btnList), rp.Row(btnRun, btnStop), rp.Row(btnTZ, btnReport))

	// repeat menu
	a.repMK = &telebot.ReplyMarkup{}
	a.btnRepToday = a.repMK.Data("–°–µ–≥–æ–¥–Ω—è", "rep_today", "today")
	a.btnRepDaily = a.repMK.Data("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "rep_daily", "daily")
	a.btnRepWork = a.repMK.Data("–†–∞–±–æ—á–∏–µ –¥–Ω–∏", "rep_workdays", "workdays")
	a.btnRepCust = a.repMK.Data("–í—ã–±—Ä–∞—Ç—å –¥–Ω–∏", "rep_custom", "custom")
	a.repMK.Inline(a.repMK.Row(a.btnRepToday, a.btnRepDaily), a.repMK.Row(a.btnRepWork, a.btnRepCust))

	// custom day uniques
	a.btnMon = telebot.Btn{Unique: "day_mon"}
	a.btnTue = telebot.Btn{Unique: "day_tue"}
	a.btnWed = telebot.Btn{Unique: "day_wed"}
	a.btnThu = telebot.Btn{Unique: "day_thu"}
	a.btnFri = telebot.Btn{Unique: "day_fri"}
	a.btnSat = telebot.Btn{Unique: "day_sat"}
	a.btnSun = telebot.Btn{Unique: "day_sun"}
	a.btnDaysDone = telebot.Btn{Unique: "day_done"}

	// report menu
	a.reportMK = &telebot.ReplyMarkup{}
	a.btnRptDay = a.reportMK.Data("–°–µ–≥–æ–¥–Ω—è", "rpt_day", "day")
	a.btnRptWeek = a.reportMK.Data("–ù–µ–¥–µ–ª—è", "rpt_week", "week")
	a.btnRptMonth = a.reportMK.Data("–ú–µ—Å—è—Ü", "rpt_month", "month")
	a.btnRptAll = a.reportMK.Data("–í—Å—ë –≤—Ä–µ–º—è", "rpt_all", "all")
	a.reportMK.Inline(a.reportMK.Row(a.btnRptDay, a.btnRptWeek), a.reportMK.Row(a.btnRptMonth, a.btnRptAll))

	// per-task buttons
	a.btnTaskToggle = telebot.Btn{Unique: "task_toggle"}
	a.btnTaskDelete = telebot.Btn{Unique: "task_delete"}

	// commands
	a.Bot.Handle("/start", func(c telebot.Context) error {
		_, _ = a.St.GetOrCreateUser(c.Sender().ID, defaultTZ)
		return c.Send("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /add /list /run /stop /report /help.", rp)
	})
	a.Bot.Handle("/help", func(c telebot.Context) error {
		return c.Send("–ö–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n/list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n/run ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å\n/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å\n/tz ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ç–∞–π–º-–∑–æ–Ω—É\n/report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
	})
	a.Bot.Handle(&btnAdd, func(c telebot.Context) error { return a.handleAddStart(c, defaultTZ) })
	a.Bot.Handle("/add", func(c telebot.Context) error { return a.handleAddStart(c, defaultTZ) })
	a.Bot.Handle(&btnList, a.handleList)
	a.Bot.Handle("/list", a.handleList)
	a.Bot.Handle(&btnRun, a.handleRun)
	a.Bot.Handle("/run", a.handleRun)
	a.Bot.Handle(&btnStop, a.handleStop)
	a.Bot.Handle("/stop", a.handleStop)
	a.Bot.Handle(&btnTZ, a.handleTZ)
	a.Bot.Handle("/tz", a.handleTZ)
	a.Bot.Handle(&btnReport, a.handleReportMenu)
	a.Bot.Handle("/report", a.handleReportMenu)

	// inline handlers
	// repeat
	a.Bot.Handle(&a.btnRepToday, func(c telebot.Context) error { return a.cbRepeatChoice(c, "today") })
	a.Bot.Handle(&a.btnRepDaily, func(c telebot.Context) error { return a.cbRepeatChoice(c, "daily") })
	a.Bot.Handle(&a.btnRepWork, func(c telebot.Context) error { return a.cbRepeatChoice(c, "workdays") })
	a.Bot.Handle(&a.btnRepCust, func(c telebot.Context) error { return a.cbRepeatChoice(c, "custom") })
	// custom days
	a.Bot.Handle(&a.btnMon, func(c telebot.Context) error { return a.cbToggleDay(c, time.Monday) })
	a.Bot.Handle(&a.btnTue, func(c telebot.Context) error { return a.cbToggleDay(c, time.Tuesday) })
	a.Bot.Handle(&a.btnWed, func(c telebot.Context) error { return a.cbToggleDay(c, time.Wednesday) })
	a.Bot.Handle(&a.btnThu, func(c telebot.Context) error { return a.cbToggleDay(c, time.Thursday) })
	a.Bot.Handle(&a.btnFri, func(c telebot.Context) error { return a.cbToggleDay(c, time.Friday) })
	a.Bot.Handle(&a.btnSat, func(c telebot.Context) error { return a.cbToggleDay(c, time.Saturday) })
	a.Bot.Handle(&a.btnSun, func(c telebot.Context) error { return a.cbToggleDay(c, time.Sunday) })
	a.Bot.Handle(&a.btnDaysDone, a.cbDaysDone)
	// reports
	a.Bot.Handle(&a.btnRptDay, func(c telebot.Context) error { return a.renderReport(c, "day") })
	a.Bot.Handle(&a.btnRptWeek, func(c telebot.Context) error { return a.renderReport(c, "week") })
	a.Bot.Handle(&a.btnRptMonth, func(c telebot.Context) error { return a.renderReport(c, "month") })
	a.Bot.Handle(&a.btnRptAll, func(c telebot.Context) error { return a.renderReport(c, "all") })
	// per-task list
	a.Bot.Handle(&a.btnTaskToggle, a.cbTaskToggle)
	a.Bot.Handle(&a.btnTaskDelete, a.cbTaskDelete)

	// text for add flow
	a.Bot.Handle(telebot.OnText, a.handleText)
}

func (a *BotApp) handleAddStart(c telebot.Context, defaultTZ string) error {
	_, _ = a.St.GetOrCreateUser(c.Sender().ID, defaultTZ)
	a.addMu.Lock()
	a.addState[c.Sender().ID] = &AddState{Step: 1}
	a.addMu.Unlock()
	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é)")
}

func (a *BotApp) handleText(c telebot.Context) error {
	text := strings.TrimSpace(c.Text())
	if text == "" {
		return nil
	}
	a.addMu.Lock()
	st, ok := a.addState[c.Sender().ID]
	a.addMu.Unlock()
	if !ok {
		return nil
	}
	switch st.Step {
	case 1:
		st.Title = text
		st.Step = 2
		return c.Send("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 09:30")
	case 2:
		h, m, ok := timeutil.ParseHHMM(text)
		if !ok {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ HH:MM (–ø—Ä–∏–º–µ—Ä: 09:30)")
		}
		st.StartH, st.StartM = h, m
		st.Step = 3
		return c.Send("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 11:00")
	case 3:
		h, m, ok := timeutil.ParseHHMM(text)
		if !ok {
			return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ HH:MM (–ø—Ä–∏–º–µ—Ä: 11:00)")
		}
		st.EndH, st.EndM = h, m
		if st.EndH < st.StartH || (st.EndH == st.StartH && st.EndM <= st.StartM) {
			return c.Send("–û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (HH:MM)")
		}
		st.Step = 4
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä:", a.repMK)
	}
	return nil
}

// helpers
func (a *BotApp) formatDays(mask int) string {
	if mask == timeutil.MaskDaily() {
		return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
	}
	if mask == timeutil.MaskWorkdays() {
		return "–†–∞–±–æ—á–∏–µ –¥–Ω–∏"
	}
	parts := []string{}
	if mask&timeutil.BitMon != 0 {
		parts = append(parts, "–ü–Ω")
	}
	if mask&timeutil.BitTue != 0 {
		parts = append(parts, "–í—Ç")
	}
	if mask&timeutil.BitWed != 0 {
		parts = append(parts, "–°—Ä")
	}
	if mask&timeutil.BitThu != 0 {
		parts = append(parts, "–ß—Ç")
	}
	if mask&timeutil.BitFri != 0 {
		parts = append(parts, "–ü—Ç")
	}
	if mask&timeutil.BitSat != 0 {
		parts = append(parts, "–°–±")
	}
	if mask&timeutil.BitSun != 0 {
		parts = append(parts, "–í—Å")
	}
	if len(parts) == 0 {
		return "-"
	}
	if len(parts) == 1 {
		return "–°–µ–≥–æ–¥–Ω—è (" + parts[0] + ")"
	}
	return strings.Join(parts, ", ")
}

func (a *BotApp) renderCustomDaysKeyboard(st *AddState) *telebot.ReplyMarkup {
	isOn := func(bit int) bool { return (st.DaysMask & bit) != 0 }
	label := func(name string, on bool) string {
		if on {
			return "‚úÖ " + name
		}
		return name
	}
	mk := &telebot.ReplyMarkup{}
	bMon := mk.Data(label("–ü–Ω", isOn(timeutil.BitMon)), a.btnMon.Unique, "mon")
	bTue := mk.Data(label("–í—Ç", isOn(timeutil.BitTue)), a.btnTue.Unique, "tue")
	bWed := mk.Data(label("–°—Ä", isOn(timeutil.BitWed)), a.btnWed.Unique, "wed")
	bThu := mk.Data(label("–ß—Ç", isOn(timeutil.BitThu)), a.btnThu.Unique, "thu")
	bFri := mk.Data(label("–ü—Ç", isOn(timeutil.BitFri)), a.btnFri.Unique, "fri")
	bSat := mk.Data(label("–°–±", isOn(timeutil.BitSat)), a.btnSat.Unique, "sat")
	bSun := mk.Data(label("–í—Å", isOn(timeutil.BitSun)), a.btnSun.Unique, "sun")
	bDone := mk.Data("–ì–æ—Ç–æ–≤–æ", a.btnDaysDone.Unique, "done")
	mk.Inline(mk.Row(bMon, bTue, bWed, bThu), mk.Row(bFri, bSat, bSun), mk.Row(bDone))
	return mk
}

func (a *BotApp) buildTaskText(t store.Task) string {
	state := "–í–´–ö–õ"
	if t.Enabled {
		state = "–í–ö–õ"
	}
	return fmt.Sprintf("‚Ä¢ %02d:%02d‚Äì%02d:%02d %s [%s]\n–î–Ω–∏: %s", t.StartH, t.StartM, t.EndH, t.EndM, t.Title, state, a.formatDays(t.DaysMask))
}

func (a *BotApp) buildTaskMarkup(t store.Task) *telebot.ReplyMarkup {
	mk := &telebot.ReplyMarkup{}
	bT := mk.Data("–í–∫–ª/–í—ã–∫–ª", a.btnTaskToggle.Unique, fmt.Sprintf("%d", t.ID))
	bD := mk.Data("–£–¥–∞–ª–∏—Ç—å", a.btnTaskDelete.Unique, fmt.Sprintf("%d", t.ID))
	mk.Inline(mk.Row(bT, bD))
	return mk
}

// callbacks

func (a *BotApp) cbRepeatChoice(c telebot.Context, kind string) error {
	id := c.Sender().ID
	a.addMu.Lock()
	st, ok := a.addState[id]
	a.addMu.Unlock()
	if !ok {
		return c.Respond()
	}

	switch kind {
	case "today":
		u, err := a.St.GetUserByTGID(id)
		if err != nil {
			return c.Respond()
		}
		loc, err := time.LoadLocation(u.TZ)
		if err != nil {
			return c.Respond()
		}
		now := time.Now().In(loc)
		st.DaysMask = timeutil.WeekdayBit(now.Weekday())
		return a.finishAdd(c)
	case "daily":
		st.DaysMask = timeutil.MaskDaily()
		return a.finishAdd(c)
	case "workdays":
		st.DaysMask = timeutil.MaskWorkdays()
		return a.finishAdd(c)
	case "custom":
		return c.Edit(chooseDaysTitle, a.renderCustomDaysKeyboard(st))
	}
	return c.Respond()
}

func (a *BotApp) cbToggleDay(c telebot.Context, wd time.Weekday) error {
	id := c.Sender().ID
	a.addMu.Lock()
	st, ok := a.addState[id]
	if ok {
		st.DaysMask ^= timeutil.WeekdayBit(wd)
	}
	a.addMu.Unlock()
	if ok {
		_ = c.Edit(chooseDaysTitle, a.renderCustomDaysKeyboard(st))
		return c.Respond()
	}
	return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
}

func (a *BotApp) cbDaysDone(c telebot.Context) error {
	id := c.Sender().ID
	a.addMu.Lock()
	st, ok := a.addState[id]
	a.addMu.Unlock()
	if !ok || st.DaysMask == 0 {
		return c.Respond(&telebot.CallbackResponse{Text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å"})
	}
	return a.finishAdd(c)
}

func (a *BotApp) cbTaskToggle(c telebot.Context) error {
	id := c.Sender().ID
	u, err := a.St.GetUserByTGID(id)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
	}
	var taskID int64
	fmt.Sscanf(c.Callback().Data, "%d", &taskID)
	enabled, err := a.St.ToggleTask(u.ID, taskID)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞"})
	}
	if u.ControlEnabled {
		_ = a.Sch.ScheduleAllForUser(u)
	}
	t, err := a.St.GetTask(u.ID, taskID)
	if err == nil {
		_ = c.Edit(a.buildTaskText(t), a.buildTaskMarkup(t))
	}
	msg := "–í—ã–∫–ª—é—á–µ–Ω–æ"
	if enabled {
		msg = "–í–∫–ª—é—á–µ–Ω–æ"
	}
	return c.Respond(&telebot.CallbackResponse{Text: msg})
}

func (a *BotApp) cbTaskDelete(c telebot.Context) error {
	id := c.Sender().ID
	u, err := a.St.GetUserByTGID(id)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
	}
	var taskID int64
	fmt.Sscanf(c.Callback().Data, "%d", &taskID)
	_ = a.St.DeleteTask(u.ID, taskID)
	if u.ControlEnabled {
		_ = a.Sch.ScheduleAllForUser(u)
	}
	_ = c.Delete()
	return nil
}

// command handlers

func (a *BotApp) finishAdd(c telebot.Context) error {
	id := c.Sender().ID
	u, err := a.St.GetUserByTGID(id)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}
	a.addMu.Lock()
	st := a.addState[id]
	delete(a.addState, id)
	a.addMu.Unlock()
	if st == nil {
		return c.Send("–û—Ç–º–µ–Ω–µ–Ω–æ")
	}

	taskID, err := a.St.CreateTask(store.Task{
		UserID: u.ID, Title: st.Title,
		StartH: st.StartH, StartM: st.StartM,
		EndH: st.EndH, EndM: st.EndM,
		DaysMask: st.DaysMask,
	})
	if err != nil {
		return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
	}
	if u.ControlEnabled {
		_ = a.Sch.ScheduleAllForUser(u)
	}

	t, _ := a.St.GetTask(u.ID, taskID)
	return c.Send("‚úÖ–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n ‚ö†Ô∏è–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å!\n" + a.buildTaskText(t))
}

func (a *BotApp) handleList(c telebot.Context) error {
	u, err := a.St.GetUserByTGID(c.Sender().ID)
	if err != nil {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ /start")
	}
	tasks, err := a.St.ListTasks(u.ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–¥–∞—á")
	}
	if len(tasks) == 0 {
		return c.Send("–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
	}
	for _, t := range tasks {
		_ = c.Send(a.buildTaskText(t), a.buildTaskMarkup(t))
	}
	return nil
}

func (a *BotApp) handleRun(c telebot.Context) error {
	u, err := a.St.GetUserByTGID(c.Sender().ID)
	if err != nil {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ /start")
	}
	if err := a.St.SetControl(u.ID, true); err != nil {
		return c.Send("–û—à–∏–±–∫–∞")
	}
	u.ControlEnabled = true
	if err := a.Sch.ScheduleAllForUser(u); err != nil {
		log.Println("schedule error:", err)
	}
	return c.Send("–ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–ø—É—â–µ–Ω. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:05 –≤–∞—à–µ–π —Ç–∞–π–º-–∑–æ–Ω—ã.")
}

func (a *BotApp) handleStop(c telebot.Context) error {
	u, err := a.St.GetUserByTGID(c.Sender().ID)
	if err != nil {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ /start")
	}
	if err := a.St.SetControl(u.ID, false); err != nil {
		return c.Send("–û—à–∏–±–∫–∞")
	}
	a.Sch.ClearUser(u.ID)
	return c.Send("–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
}

func (a *BotApp) handleTZ(c telebot.Context) error {
	u, err := a.St.GetUserByTGID(c.Sender().ID)
	if err != nil {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ /start")
	}
	args := strings.Fields(c.Message().Payload)
	if len(args) == 0 {
		return c.Send("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /tz Europe/Kyiv (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é IANA —Ç–∞–π–º-–∑–æ–Ω—É)")
	}
	tz := args[0]
	if _, err := time.LoadLocation(tz); err != nil {
		return c.Send("–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–∞–π–º-–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: Europe/Kyiv")
	}
	if err := a.St.UpdateUserTZ(u.ID, tz); err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è TZ")
	}
	if u.ControlEnabled {
		_ = a.Sch.ScheduleAllForUser(store.User{ID: u.ID, TGID: u.TGID, TZ: tz, ControlEnabled: true})
	}
	return c.Send("–¢–∞–π–º-–∑–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: " + tz)
}

func (a *BotApp) handleReportMenu(c telebot.Context) error {
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞:", a.reportMK)
}

func (a *BotApp) renderReport(c telebot.Context, period string) error {
	u, err := a.St.GetUserByTGID(c.Sender().ID)
	if err != nil {
		return c.Send("–°–Ω–∞—á–∞–ª–∞ /start")
	}
	fromUTC, toUTC, err := timeutil.RangeUTC(period, u.TZ)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —Ç–∞–π–º-–∑–æ–Ω—ã")
	}
	stats, err := a.St.GetStats(u.ID, fromUTC, toUTC)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –æ—Ç—á—ë—Ç–∞")
	}
	if len(stats) == 0 {
		switch period {
		case "day":
			return c.Edit("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
		case "week":
			return c.Edit("–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
		case "month":
			return c.Edit("–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
		default:
			return c.Edit("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
		}
	}
	sort.Slice(stats, func(i, j int) bool { return stats[i].Seconds > stats[j].Seconds })
	total := int64(0)
	for _, s := range stats {
		total += s.Seconds
	}
	var b strings.Builder
	title := map[string]string{"day": "—Å–µ–≥–æ–¥–Ω—è", "week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü", "all": "–≤—Å—ë –≤—Ä–µ–º—è"}[period]
	if title == "" {
		title = "–ø–µ—Ä–∏–æ–¥"
	}
	fmt.Fprintf(&b, "–û—Ç—á—ë—Ç –∑–∞ %s:\n", title)
	for _, s := range stats {
		h := s.Seconds / 3600
		m := (s.Seconds % 3600) / 60
		fmt.Fprintf(&b, "‚Ä¢ %s ‚Äî %02d—á %02d–º\n", s.Title, h, m)
	}
	h := total / 3600
	m := (total % 3600) / 60
	fmt.Fprintf(&b, "\n–ò—Ç–æ–≥–æ: %02d—á %02d–º", h, m)
	return c.Edit(b.String())
}
